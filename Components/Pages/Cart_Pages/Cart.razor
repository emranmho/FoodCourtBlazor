@page "/cart"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization

@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IShoppingCartService ShoppingCartService
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@attribute [Authorize]
@if (IsLoading)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column bg-white justify-content-center align-items-center">
        <img src="Images/loading.gif" alt="loading"/>
    </div>
}
else
{
    if (ShoppingCarts.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>

                    @foreach (var cart in ShoppingCarts)
                    {
                        <div class="d-flex p-2 m-2">

                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px;"
                                     src="@(cart.Product.ImageUrl ?? "/Images/default.png")" alt="">

                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4 class="">
                                            @cart.Product.Name
                                        </h4>
                                        <h4>
                                            @cart.Product.Price.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">
                                            @((cart.Product.Price * cart.Count).ToString("C", CultureInfo.CreateSpecificCulture("en-US")))
                                        </h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between g-0">
                                            <span>
                                                <i class="bi bi-dash-circle-fill btn text-secondary"
                                                   @onclick="() => ChangeProductCount(cart.ProductId, -1)"></i>
                                            </span>
                                            <span class="ml-1 me-1">
                                                <b class="lead">@cart.Count</b>
                                            </span>
                                            <span>
                                                <i class="bi bi-plus-circle-fill btn text-secondary"
                                                   @onclick="() => ChangeProductCount(cart.ProductId, 1)"></i>
                                            </span>
                                        </div>
                                        <button class="btn btn-danger" @onclick="() => RemoveProductFromCart(cart.Id)">
                                            Remove
                                        </button>
                                    </div>
                                </div>

                            </div>

                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="OrderCart" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator/>
                        <div class="card-body">
                            <div class="form-group">
                                <label>Name</label>
                                <InputText @bind-Value="OrderCart.Name" type="text" class="form-control"/>
                                <ValidationMessage For="@(() => OrderCart.Name)"/>
                            </div>
                            <div class="form-group">
                                <label>Address</label>
                                <InputText @bind-Value="OrderCart.Address" type="text" class="form-control"/>
                                <ValidationMessage For="@(() => OrderCart.Address)"/>
                            </div>
                            <div class="form-group">
                                <label>Phone</label>
                                <InputText @bind-Value="OrderCart.PhoneNumber" type="text" class="form-control"/>
                                <ValidationMessage For="@(() => OrderCart.PhoneNumber)"/>
                            </div>
                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @_totalPrice.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))
                                    </h4>
                                    <h4>
                                        No. of Items: @_totalItems
                                    </h4>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="position-absolute w-100 vh-100 d-flex flex-column bg-white justify-content-center align-items-center">
            <h1 class="text-danger">No Items in Cart</h1>
        </div>
    }
}

@code {
    private bool IsLoading { get; set; } = true;
    private IEnumerable<ShoppingCart> ShoppingCarts { get; set; } = new List<ShoppingCart>();
    private string _userId = "";
    private decimal _totalPrice = 0;
    private int _totalItems = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
        _userId = await AuthService.GetUserIdAsync();

        if (firstRender)
        {
            await LoadShoppingCarts();
            IsLoading = false;
            StateHasChanged();
        }
    }

    [SupplyParameterFromForm] public OrderCart OrderCart { get; set; } = new OrderCart();

    private async Task LoadShoppingCarts()
    {
        ShoppingCarts = await ShoppingCartService.GetAllAsync(_userId);
        if (ShoppingCarts.Any())
        {
            _totalPrice = ShoppingCarts.Sum(d => d.Product.Price * d.Count);
            _totalItems = ShoppingCarts.Sum(d => d.Count);
        }
    }

    private async Task RemoveProductFromCart(Guid shoppingCartId)
    {
        var result = await ShoppingCartService.DeleteShoppingCart(shoppingCartId);
        if (result)
        {
            await LoadShoppingCarts();
        }
    }

    private async Task ChangeProductCount(Guid productId, int count)
    {
        var result = await ShoppingCartService.CreateOrUpdateCart(_userId, productId, count);
        if (result)
        {
            await LoadShoppingCarts();
        }
    }

    public async Task ProcessOrderCreation()
    {
        // var result = await ShoppingCartService.CreateOrder(OrderCart, _userId);
        // if(result)
        // {
        //     NavigationManager.NavigateTo("/order");
        // }
    }

}