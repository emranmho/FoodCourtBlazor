@page "/"
@using System.Globalization
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IShoppingCartService ShoppingCartService
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
<PageTitle>Home</PageTitle>

@if (IsLoading)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column bg-white justify-content-center align-items-center">
        <img src="Images/loading.gif" alt="loading"/>
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
    <div class="jumbotron-custom">
        <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

            <div class="d-flex align-items-center" style="width: 100%;">
                <input type="text" 
                       class="form-control rounded-pill"
                       @bind:event="oninput" 
                       @bind:get="_searchText"
                       @bind:set="FilterProductBySearch"
                       placeholder="Search for Food Items!"
                       style="width: 100%; padding: 20px;">
                <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
            </div>
        </div>
    </div>

    <div class="content px-4 m-2">
        <ul class="nav nav-underline justify-content-center mb-2">
            <li class="nav-item">
                <span class="nav-link @GetActiveTabClass(Guid.Empty)" href="#" style="cursor: pointer" @onclick="() => FilterProductByCategory(Guid.Empty)">All</span>
            </li>
            @foreach (var category in Categories)
            {
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(category.Id)" href="#" style="cursor: pointer" 
                          @onclick="() => FilterProductByCategory(category.Id)">@category.Name</span>
                </li>
            }
        </ul>
        <div class="row mt-4 mx-1">
            @foreach (var product in ProductsAfterFilter)
            {
                <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                
                    <div class="card">
                        <div class="mt-3 mb-2 row">
                            <div class="col-6 px-3">
                                @if (!string.IsNullOrWhiteSpace(product.SpecialTag))
                                {
                                    <i class="bi bi-star btn btn-outline-success disabled"> @product.SpecialTag</i>
                                }
                            </div>
                            <div class="col-6 text-end text-danger px-3 h3">
                                @product.Price.ToString("C" , CultureInfo.CreateSpecificCulture("en-US"))
                            </div>
                        </div>
                        <div class="text-center">
                            @if (!string.IsNullOrWhiteSpace(product.ImageUrl))
                            {
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@product.ImageUrl" style="">
                            }
                            else
                            {
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="Images/default.png" style="">
                            }
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-center lead text-success">@product.Name</h5>
                            <p class="card-text mt-2">@((MarkupString)product.Description)</p>
                            
                            <h4 class="text-center">
                                <div class="m-lg-auto p-2" @onclick="() => AddProductToCart(product.Id)">
                                    <i class="bi bi-cart3 btn btn-success text-right  px-5 form-control" > Add to cart</i>
                                </div>
                            </h4>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

}

@code
{
    private bool IsLoading { get; set; } = true;
    private IEnumerable<Product> Products { get; set; } = new List<Product>();
    private IEnumerable<Product> ProductsAfterFilter { get; set; } = new List<Product>();
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    private string _searchText = "";
    private Guid _selectedCategoryId = Guid.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductsAndCategory();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductsAndCategory()
    {
        Products = await ProductService.GetAllProducts();
        Categories = await CategoryService.GetAllCategories();
        ProductsAfterFilter = Products;
    }
    
    private void FilterProductByCategory(Guid categoryId)
    {
        if(categoryId == Guid.Empty)
        {
            ProductsAfterFilter = Products;
            return;
        }
        else
        {
            ProductsAfterFilter = Products.Where(p => p.CategoryId == categoryId).ToList();
            _searchText = string.Empty;
            _selectedCategoryId = categoryId;
        }

    }
    
    private void FilterProductBySearch(string search)
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            ProductsAfterFilter = Products;
        }
        else
        {
            ProductsAfterFilter = Products
                .Where(p => 
                    p.Name.Contains(search, StringComparison.OrdinalIgnoreCase) || 
                    p.Description.Contains(search, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        _searchText = search;
    }
    
    private string GetActiveTabClass(Guid categoryId)
    {
        return categoryId == _selectedCategoryId ? "active" : "";
    }
    
    private async Task AddProductToCart(Guid productId)
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if(!isAuthenticated)
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
        
        var userId = await AuthService.GetUserIdAsync();
        var result = await ShoppingCartService
            .CreateOrUpdateCart(userId: userId, productId, 1);
        
        if(result)
        {
            await JSRuntime.ShowNotification("success", "Product added to cart successfully!");
        }
        else
        {
            await JSRuntime.ShowNotification("error", "Failed to add product to cart!");
        }
        
    }
}
