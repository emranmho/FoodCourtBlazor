@page "/product"
@inject IProductService ProductService;
@inject IJSRuntime JsRuntime;


<DeleteModal 
    OnModalConfirmation="ConfirmDelete_Click"
    Title="Are you sure you want to delete this product?"
    ButtonClass="btn-danger"
    ButtonText="Delete">
    
</DeleteModal>


@if (IsLoading)
{
    <Loader></Loader>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-lg btn-secondary" style="width: 250px"><i class="bi bi-plus-square"></i> Add product</a>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Tag</th>
                            <th>Count</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Price</td>
                                <td><span class="badge text-bg-info">@product.SpecialTag</span></td>
                                <td>@product.AvailableQuantity</td>
                                <td>@product.Category?.Name</td>
                                <td>
                                    <a href="@($"product/update/id={product.Id}")" class="btn btn-sm btn-primary"><i class="bi bi-pencil-square"></i> Edit</a>
                                    <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteProduct(product.Id))"><i class="bi bi-trash3"></i> Delete</button>
                                                                                                                                  </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool IsLoading { get; set; } = true;
    private IEnumerable<Product> Products { get; set; } = new List<Product>();
    private Guid DeleteProductId { get; set; } = Guid.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await ProductService.GetAllProducts();
    }
    
    private async Task DeleteProduct(Guid id)
    {
        DeleteProductId = id;
        await JsRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }
    
    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        await JsRuntime.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DeleteProductId != Guid.Empty)
        {
            var result = await ProductService.DeleteProduct(DeleteProductId);
            if(result)
                await JsRuntime.ShowNotification("success", "Product deleted successfully");
            else
                await JsRuntime.ShowNotification("error", "Product deletion failed");
            await LoadProducts();
        }

        DeleteProductId = Guid.Empty;
        IsLoading = false;
    }
    

}