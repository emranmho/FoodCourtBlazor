// <auto-generated />
using System;
using FoodCourtBlazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodCourtBlazor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250220160343_addSeedData")]
    partial class addSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodCourtBlazor.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "af330fd5-095f-45bf-b9e7-40fd36b2b857",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7de3bdd-0f88-42bb-b9cf-6296b3c3d013",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Mohammodullah Emran - Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfUxvqB4ARZ5rYJFG9dAmh0hwyuvgMzMluCiEb57Av5Wc9zix7dvS0d3HMqcp8v+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cf9f509-bc0d-46c9-9841-454ef0945d3e",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "baf8b808-7918-4fda-88b3-7675970f19af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30906e7b-bd97-42ef-a83d-67d625a848f6",
                            Email = "employee@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Mohammodullah Emran - Employee",
                            NormalizedEmail = "EMPLOYEE@GMAIL.COM",
                            NormalizedUserName = "EMPLOYEE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIjoR+zocLT3scc2bfReMzYVIq9aoKcZn9JC2/QtSfifjkiX1vJsnXE/r+DpeLH3Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "763152c0-724d-4943-8d3c-9bf7709c737a",
                            TwoFactorEnabled = false,
                            UserName = "employee@gmail.com"
                        });
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Vegetable"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Meat"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Name = "Frozen Foods"
                        });
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f45b08e-27af-47ea-916d-eba01be1e0ca"),
                            AvailableQuantity = 100,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9409),
                            Description = "Fresh and sweet yellow bananas, rich in potassium.",
                            ImageUrl = "banana.jpg",
                            IsAvailable = true,
                            Name = "Banana",
                            Price = 1.50m,
                            SpecialTag = "Organic",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9507)
                        },
                        new
                        {
                            Id = new Guid("42bfe676-28cb-478e-9506-5a1a9973231d"),
                            AvailableQuantity = 80,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9618),
                            Description = "Crisp and juicy red apples.",
                            ImageUrl = "apple.jpg",
                            IsAvailable = true,
                            Name = "Apple",
                            Price = 2.00m,
                            SpecialTag = "Fresh Harvest",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9618)
                        },
                        new
                        {
                            Id = new Guid("7c0461bf-04b3-4f89-b018-78d401d9a010"),
                            AvailableQuantity = 150,
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9630),
                            Description = "Crunchy orange carrots packed with vitamins.",
                            ImageUrl = "carrot.jpg",
                            IsAvailable = true,
                            Name = "Carrot",
                            Price = 1.20m,
                            SpecialTag = "Farm Fresh",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9631)
                        },
                        new
                        {
                            Id = new Guid("9e145a4b-d16e-449b-9aab-32cd72f083ed"),
                            AvailableQuantity = 120,
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9636),
                            Description = "Rich in iron and perfect for salads.",
                            ImageUrl = "spinach.jpg",
                            IsAvailable = true,
                            Name = "Spinach",
                            Price = 1.80m,
                            SpecialTag = "Organic",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9636)
                        },
                        new
                        {
                            Id = new Guid("c9fffa4c-fc78-42f7-a3c7-42a3bcfa9105"),
                            AvailableQuantity = 90,
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9641),
                            Description = "Boneless and skinless chicken breast.",
                            ImageUrl = "chicken_breast.jpg",
                            IsAvailable = true,
                            Name = "Chicken Breast",
                            Price = 7.99m,
                            SpecialTag = "Free Range",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9642)
                        },
                        new
                        {
                            Id = new Guid("b4e23795-8423-4b08-8b6b-1b7373926ce4"),
                            AvailableQuantity = 70,
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9646),
                            Description = "Lean ground beef, perfect for burgers.",
                            ImageUrl = "ground_beef.jpg",
                            IsAvailable = true,
                            Name = "Ground Beef",
                            Price = 9.50m,
                            SpecialTag = "Grass-Fed",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9647)
                        },
                        new
                        {
                            Id = new Guid("0cf87550-90ad-4cbf-a87a-1b20ec4023aa"),
                            AvailableQuantity = 200,
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9652),
                            Description = "Fresh cow milk, high in calcium.",
                            ImageUrl = "milk.jpg",
                            IsAvailable = true,
                            Name = "Milk",
                            Price = 3.99m,
                            SpecialTag = "Full Cream",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9652)
                        },
                        new
                        {
                            Id = new Guid("645092f5-b562-4a8d-b9f3-d43d69a07e60"),
                            AvailableQuantity = 60,
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9656),
                            Description = "Sharp and aged cheddar cheese.",
                            ImageUrl = "cheddar_cheese.jpg",
                            IsAvailable = true,
                            Name = "Cheddar Cheese",
                            Price = 6.50m,
                            SpecialTag = "Aged 2 Years",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9657)
                        },
                        new
                        {
                            Id = new Guid("999d576d-05c3-45fa-8daa-12a10980b1be"),
                            AvailableQuantity = 90,
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9662),
                            Description = "Healthy whole wheat bread, rich in fiber.",
                            ImageUrl = "whole_wheat_bread.jpg",
                            IsAvailable = true,
                            Name = "Whole Wheat Bread",
                            Price = 2.50m,
                            SpecialTag = "Freshly Baked",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9663)
                        },
                        new
                        {
                            Id = new Guid("02f3254d-e174-447f-8ee9-70f1cd792fc7"),
                            AvailableQuantity = 75,
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9667),
                            Description = "Flaky and buttery croissant.",
                            ImageUrl = "croissant.jpg",
                            IsAvailable = true,
                            Name = "Croissant",
                            Price = 3.00m,
                            SpecialTag = "Handmade",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9668)
                        },
                        new
                        {
                            Id = new Guid("5d2e6f52-f86d-4b2c-ba4f-d448632a1bf8"),
                            AvailableQuantity = 130,
                            CategoryId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9700),
                            Description = "Freshly squeezed orange juice, no sugar added.",
                            ImageUrl = "orange_juice.jpg",
                            IsAvailable = true,
                            Name = "Orange Juice",
                            Price = 4.50m,
                            SpecialTag = "100% Pure",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9701)
                        },
                        new
                        {
                            Id = new Guid("1f36a06c-c3be-4184-8f71-282871162fc3"),
                            AvailableQuantity = 140,
                            CategoryId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9705),
                            Description = "Crispy and salted potato chips.",
                            ImageUrl = "chips.jpg",
                            IsAvailable = true,
                            Name = "Chips",
                            Price = 2.00m,
                            SpecialTag = "Classic",
                            UpdatedDate = new DateTime(2025, 2, 20, 16, 3, 43, 12, DateTimeKind.Utc).AddTicks(9706)
                        });
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "98b33dba-71b3-4d10-a0f1-96119b426a84",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6e344404-b5fb-4e1f-8546-74379efc5a93",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3e95ffcb-4f1b-463b-bc90-c950bef08072",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "af330fd5-095f-45bf-b9e7-40fd36b2b857",
                            RoleId = "98b33dba-71b3-4d10-a0f1-96119b426a84"
                        },
                        new
                        {
                            UserId = "baf8b808-7918-4fda-88b3-7675970f19af",
                            RoleId = "3e95ffcb-4f1b-463b-bc90-c950bef08072"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.Product", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.ShoppingCart", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
