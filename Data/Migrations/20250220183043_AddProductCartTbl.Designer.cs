// <auto-generated />
using System;
using FoodCourtBlazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodCourtBlazor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250220183043_AddProductCartTbl")]
    partial class AddProductCartTbl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodCourtBlazor.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "875c43b8-5088-4228-a811-2c93b6597a50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d54d6b69-6999-4db9-aeaf-5a63606598e7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Mohammodullah Emran - Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYJdhK5hFnNeHYY3jon2h4iIZ4UHt2XfsosHrvjyLsMYksqg8dDoliCjEe8K8ZEwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7ed320b-b295-478b-a102-dbaf27fe7092",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "0fe46ae8-fb9c-422c-ade4-1063dd71827a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "634e3767-ebdd-49a4-9240-7c16add41895",
                            Email = "employee@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Mohammodullah Emran - Employee",
                            NormalizedEmail = "EMPLOYEE@GMAIL.COM",
                            NormalizedUserName = "EMPLOYEE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK881WZO3F3umvjqg2zCioBeS0wI4h9QDRwhJRMAXMDKKkuPk+gaspgav/UsnAnvLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2769718-f87f-405c-8c44-943ce7dcc5c7",
                            TwoFactorEnabled = false,
                            UserName = "employee@gmail.com"
                        });
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Vegetable"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Meat"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Name = "Frozen Foods"
                        });
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.OrderCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("double precision");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderCarts");
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.OrderCartDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderCartId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderCartId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderCartDetails");
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15931c79-9a80-4958-b02c-fd35f3c61e4d"),
                            AvailableQuantity = 100,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6374),
                            Description = "Fresh and sweet yellow bananas, rich in potassium.",
                            ImageUrl = "banana.jpg",
                            IsAvailable = true,
                            Name = "Banana",
                            Price = 1.50m,
                            SpecialTag = "Organic",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6494)
                        },
                        new
                        {
                            Id = new Guid("9c616620-eef1-42bb-bae3-097011322631"),
                            AvailableQuantity = 80,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6631),
                            Description = "Crisp and juicy red apples.",
                            ImageUrl = "apple.jpg",
                            IsAvailable = true,
                            Name = "Apple",
                            Price = 2.00m,
                            SpecialTag = "Fresh Harvest",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6632)
                        },
                        new
                        {
                            Id = new Guid("aa855f52-9a0d-49a5-b15d-cad6572ea4d1"),
                            AvailableQuantity = 150,
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6639),
                            Description = "Crunchy orange carrots packed with vitamins.",
                            ImageUrl = "carrot.jpg",
                            IsAvailable = true,
                            Name = "Carrot",
                            Price = 1.20m,
                            SpecialTag = "Farm Fresh",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = new Guid("d40654d5-edb6-4acd-9677-7fbbc58e5b62"),
                            AvailableQuantity = 120,
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6648),
                            Description = "Rich in iron and perfect for salads.",
                            ImageUrl = "spinach.jpg",
                            IsAvailable = true,
                            Name = "Spinach",
                            Price = 1.80m,
                            SpecialTag = "Organic",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6649)
                        },
                        new
                        {
                            Id = new Guid("75e8c3fd-8a88-4946-ac2e-27287595edde"),
                            AvailableQuantity = 90,
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6654),
                            Description = "Boneless and skinless chicken breast.",
                            ImageUrl = "chicken_breast.jpg",
                            IsAvailable = true,
                            Name = "Chicken Breast",
                            Price = 7.99m,
                            SpecialTag = "Free Range",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6655)
                        },
                        new
                        {
                            Id = new Guid("54a4f381-2733-4847-9cee-0808d2986265"),
                            AvailableQuantity = 70,
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6662),
                            Description = "Lean ground beef, perfect for burgers.",
                            ImageUrl = "ground_beef.jpg",
                            IsAvailable = true,
                            Name = "Ground Beef",
                            Price = 9.50m,
                            SpecialTag = "Grass-Fed",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6662)
                        },
                        new
                        {
                            Id = new Guid("31f8522f-e957-40fc-8cd0-6a8c0e8a29ee"),
                            AvailableQuantity = 200,
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6673),
                            Description = "Fresh cow milk, high in calcium.",
                            ImageUrl = "milk.jpg",
                            IsAvailable = true,
                            Name = "Milk",
                            Price = 3.99m,
                            SpecialTag = "Full Cream",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6674)
                        },
                        new
                        {
                            Id = new Guid("4ab0900d-1ef8-42be-827c-a53cd767b5c0"),
                            AvailableQuantity = 60,
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6679),
                            Description = "Sharp and aged cheddar cheese.",
                            ImageUrl = "cheddar_cheese.jpg",
                            IsAvailable = true,
                            Name = "Cheddar Cheese",
                            Price = 6.50m,
                            SpecialTag = "Aged 2 Years",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6679)
                        },
                        new
                        {
                            Id = new Guid("b3ca2419-2b27-4b56-b059-5c55130e3434"),
                            AvailableQuantity = 90,
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6691),
                            Description = "Healthy whole wheat bread, rich in fiber.",
                            ImageUrl = "whole_wheat_bread.jpg",
                            IsAvailable = true,
                            Name = "Whole Wheat Bread",
                            Price = 2.50m,
                            SpecialTag = "Freshly Baked",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6692)
                        },
                        new
                        {
                            Id = new Guid("dce40243-7b10-4283-9b8a-77836d999e2e"),
                            AvailableQuantity = 75,
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6696),
                            Description = "Flaky and buttery croissant.",
                            ImageUrl = "croissant.jpg",
                            IsAvailable = true,
                            Name = "Croissant",
                            Price = 3.00m,
                            SpecialTag = "Handmade",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6697)
                        },
                        new
                        {
                            Id = new Guid("aaff69c6-6e49-4d07-88bb-fde305bed41d"),
                            AvailableQuantity = 130,
                            CategoryId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6702),
                            Description = "Freshly squeezed orange juice, no sugar added.",
                            ImageUrl = "orange_juice.jpg",
                            IsAvailable = true,
                            Name = "Orange Juice",
                            Price = 4.50m,
                            SpecialTag = "100% Pure",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6703)
                        },
                        new
                        {
                            Id = new Guid("6a589381-de66-436f-9468-f7cd104dd587"),
                            AvailableQuantity = 140,
                            CategoryId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6708),
                            Description = "Crispy and salted potato chips.",
                            ImageUrl = "chips.jpg",
                            IsAvailable = true,
                            Name = "Chips",
                            Price = 2.00m,
                            SpecialTag = "Classic",
                            UpdatedDate = new DateTime(2025, 2, 20, 18, 30, 42, 994, DateTimeKind.Utc).AddTicks(6709)
                        });
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "edf11468-7fbb-408a-ade9-e87e08009b21",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4788369c-0b89-4c6d-ae25-75bd8202e648",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "6370ebb1-f1ff-4c6e-afde-02d511d9cb95",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "875c43b8-5088-4228-a811-2c93b6597a50",
                            RoleId = "edf11468-7fbb-408a-ade9-e87e08009b21"
                        },
                        new
                        {
                            UserId = "0fe46ae8-fb9c-422c-ade4-1063dd71827a",
                            RoleId = "6370ebb1-f1ff-4c6e-afde-02d511d9cb95"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.OrderCart", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.OrderCartDetails", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.OrderCart", "OrderCart")
                        .WithMany("OrderCartDetails")
                        .HasForeignKey("OrderCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCourtBlazor.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderCart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.Product", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.ShoppingCart", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodCourtBlazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodCourtBlazor.Data.OrderCart", b =>
                {
                    b.Navigation("OrderCartDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
